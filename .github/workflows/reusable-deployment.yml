name: Reusable deployment workflow

on:
  workflow_call:
    inputs:
      terraform_version:
        type: string
        description: 'The version of Terraform to use'
        required: false
        default: 1.4.0
      environment:
        type: string
        description: 'The environment to deploy to'
        required: true
      stack_name:
        type: string
        description: 'The name of the stack to deploy'
        required: true
      source_repository_name:
        type: string
        description: 'The name of the source repository'
        required: true
      cors_allowed_origin:
        type: string
        description: 'The allowed origin for CORS'
        required: false

jobs:
  reusable_deployment:
    name: Deploy to ${{ inputs.environment }} environment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: terraform

    env:
      TF_VAR_stack_name: ${{ inputs.stack_name }}
      TF_VAR_allowed_account_id: ${{ secrets.AWS_ALLOWED_ACCOUNT_ID }}
      TF_VAR_source_repository_url: https://github.com/chroodhq/${{ inputs.source_repository_name }}
      TF_VAR_environment: ${{ inputs.environment }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ORGANIZATION }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set optional Terraform variables
        run: |
          if [ -n "${{ inputs.cors_allowed_origin }}" ]; then
            echo "TF_VAR_cors_allowed_origin=${{ inputs.cors_allowed_origin }}" >> $GITHUB_ENV
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_TO_ASSUME }}
          aws-region: 'eu-central-1'
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~> ${{ inputs.terraform_version }}

      - name: Load cached package
        id: cached-lambda-package
        uses: actions/cache/restore@v3
        with:
          path: terraform/package
          key: lambda-package-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            lambda-package-${{ runner.os }}-
            lambda-package-

      - name: Terraform Format
        id: fmt
        env:
          COMMAND_OPTIONS: 
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=${{ inputs.stack_name }}/${{ inputs.environment }}/terraform.tfstate" -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        timeout-minutes: 5
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color
